---
interface Props {
    title: string;
    summary: string;
    impact?: string;
    stack?: string[];
    image?: string;
    links?: { github?: string | null; demo?: string | null };
    private?: boolean;
}

const {
    title,
    summary,
    impact,
    stack = [],
    image,
    links = {},
    private: isPrivate,
} = Astro.props as Props;

const modalId =
    "work-img-" +
    title
        .toLowerCase()
        .replace(/\s+/g, "-")
        .replace(/[^a-z0-9-]/g, "");
---

<article
    class="card-spot rounded-2xl border border-white/10 bg-white/5 transition-colors duration-200 hover:bg-white/7 hover:border-white/15"
>
    {
        image && (
            <button
                type="button"
                class="block w-full focus:outline-none"
                aria-label={`Ampliar imagen de ${title}`}
                onclick={`document.querySelector('#${modalId}')?.showModal()`}
            >
                <img
                    src={image}
                    alt={title}
                    class="w-full h-40 object-cover"
                    loading="lazy"
                    decoding="async"
                />
            </button>
        )
    }

    <div class="p-5">
        <h3 class="text-lg font-semibold leading-tight">{title}</h3>
        <p class="opacity-90 mt-2">{summary}</p>
        {
            impact && (
                <p class="opacity-80 mt-2 text-sm">
                    <span class="opacity-70">Impacto:</span> {impact}
                </p>
            )
        }
        {
            stack.length > 0 && (
                <ul class="mt-3 flex flex-wrap gap-2 text-xs">
                    {stack.map((t) => (
                        <li class="rounded-full px-2 py-1 bg-white/10 border border-white/10">
                            {t}
                        </li>
                    ))}
                </ul>
            )
        }
        <div class="mt-4 flex flex-wrap gap-3">
            {
                links.demo && (
                    <a
                        href={links.demo}
                        target="_blank"
                        rel="noopener"
                        class="rounded-xl px-3 py-1.5 bg-white/10 hover:bg-white/15"
                    >
                        Demo
                    </a>
                )
            }
            {
                links.github ? (
                    <a
                        href={links.github}
                        target="_blank"
                        rel="noopener"
                        class="rounded-xl px-3 py-1.5 ring-1 ring-white/15 hover:bg-white/5"
                    >
                        GitHub
                    </a>
                ) : isPrivate ? (
                    <span class="rounded-xl px-3 py-1.5 ring-1 ring-white/15 opacity-70">
                        Repositorio privado
                    </span>
                ) : null
            }
        </div>
    </div>
</article>

{
    image && (
        <dialog
            id={modalId}
            data-dialog
            class="rounded-xl p-0 w-[92vw] max-w-4xl bg-neutral-900/95 border border-white/10"
        >
            <div class="flex items-center justify-between px-4 py-2 border-b border-white/10">
                <span class="text-sm opacity-80 truncate pr-2">{title}</span>
                <button
                    type="button"
                    class="px-2 py-1 text-sm rounded-md bg-white/10 hover:bg-white/15 border border-white/10"
                    aria-label="Cerrar"
                    onclick={`document.querySelector('#${modalId}')?.close()`}
                >
                    âœ•
                </button>
            </div>
            <div class="p-3">
                <img
                    src={image}
                    alt={`Vista ampliada de ${title}`}
                    class="w-full h-auto max-h-[80vh] object-contain rounded-lg"
                />
            </div>
        </dialog>
    )
}

<script is:inline>
    // tu efecto de hover
    document.querySelectorAll(".card-spot").forEach((card) => {
        card.addEventListener("mousemove", (e) => {
            const r = card.getBoundingClientRect();
            card.style.setProperty("--mx", `${e.clientX - r.left}px`);
            card.style.setProperty("--my", `${e.clientY - r.top}px`);
        });
    });
</script>

<script type="module">
    import "../scripts/dialog.ts";
</script>
